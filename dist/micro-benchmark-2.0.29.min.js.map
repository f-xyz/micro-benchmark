{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","micro-benchmark-2.0.29.min.js","node_modules/browserify/node_modules/process/browser.js","node_modules/chalk/index.js","node_modules/chalk/node_modules/ansi-styles/index.js","node_modules/chalk/node_modules/escape-string-regexp/index.js","node_modules/chalk/node_modules/has-ansi/index.js","node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regex/index.js","node_modules/chalk/node_modules/strip-ansi/index.js","node_modules/chalk/node_modules/supports-color/index.js","node_modules/console.table/index.js","node_modules/console.table/node_modules/easy-table/lib/aggregations.js","node_modules/console.table/node_modules/easy-table/lib/sort.js","node_modules/console.table/node_modules/easy-table/lib/table.js","node_modules/easy-table/lib/table.js","src/profile.js","src/report.js","src/suite.js","src/utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","microBenchmark","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"profile","suite","report","util","./src/profile","./src/report","./src/suite","./src/utils",2,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","len","run","clearTimeout","Item","fun","array","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask",3,"Chalk","options","enabled","undefined","supportsColor","build","_styles","builder","applyStyle","__proto__","proto","argsLen","str","String","nestedStyles","originalDim","ansiStyles","dim","open","isSimpleWindowsTerm","indexOf","replace","closeRe","close","init","ret","Object","keys","styles","forEach","get","escapeStringRegexp","stripAnsi","hasAnsi","defineProps","defineProperties","platform","test","TERM","blue","key","RegExp","hasColor","stripColor","_process","ansi-styles","escape-string-regexp","has-ansi","strip-ansi","supports-color",4,"assembleStyles","modifiers","reset","bold","italic","underline","inverse","hidden","strikethrough","colors","black","red","green","yellow","magenta","cyan","white","gray","bgColors","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","grey","groupName","group","styleName","style","defineProperty","value","enumerable",5,"matchOperatorsRe","TypeError",6,"ansiRegex","re","source","bind","ansi-regex",7,8,9,"dup",10,"terminator","hasFlag","flag","pos","stdout","isTTY",11,"setupConsoleTable","arrayToString","arr","Table","record","cell","property","newRow","toString","printTitleTable","rowLength","console","log","k","sep","line","objectToArray","obj","map","objectToString","table","slice","isArray","easy-table",12,"padLeft","Printer","format","val","width","sum","printer","avg","index","./table",13,"sort","comparator","sortKeys","columns","KeysComparator","rows","comparators","sortFn","m","exec","b","compare","res",14,"Formatter","opts","hasOwnProperty","Row","__printers","__cell","col","print","shift","setWidth","isFixed","widths","cellPrinter","row","string","calcWidths","printRow","cb","firstColumn","printCell","padSpaces","RightPadder","join","_row","Number","digits","toFixed","char","LeftPadder","printArray","printObj","printTransposed","c","newLine","aggr","totals","total","fn","_","reduce","delimeter","p","padWithDashs","createRow","head","./aggregations","./sort",15,"leftPadder","ch","pad","rightPadder","each","separator","padRight","number","cols","idx","Math","max","out","pushDelimeter","forEachTotal","acc","namePrinter","cmp","order","prefix","params","item",16,"config","Function","utils","configure","limitIterations","limitTime","lastResult","elapsed","started","Date","now","operations","ops","time","./utils",17,"result","x","formatNumber","./suite","chalk","console.table",18,"extractFunctionName","exclude","words","match","filter","trim","crop","specs","repeatTimes","printReport","cacheWarmUpIterations","chartWidth","repeatFn","times","suiteResult","uniqId","./profile","./report",19,"toExponential","subst","prop","list","repeat","counter","defaults"],"mappings":"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","file":"micro-benchmark-2.0.29.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var profile = require('./src/profile');\nvar suite = require('./src/suite');\nvar report = require('./src/report');\nvar util = require('./src/utils');\n\nmodule.exports = {\n    profile: profile,\n    //profileAsync: profileAsync,\n    suite: suite,\n    //suiteAsync: suiteAsync,\n    report: report,\n    util: util\n};\n",null,"// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\nvar escapeStringRegexp = require('escape-string-regexp');\nvar ansiStyles = require('ansi-styles');\nvar stripAnsi = require('strip-ansi');\nvar hasAnsi = require('has-ansi');\nvar supportsColor = require('supports-color');\nvar defineProps = Object.defineProperties;\nvar isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);\n\nfunction Chalk(options) {\n\t// detect mode if not set manually\n\tthis.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;\n}\n\n// use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001b[94m';\n}\n\nvar styles = (function () {\n\tvar ret = {};\n\n\tObject.keys(ansiStyles).forEach(function (key) {\n\t\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\t\tret[key] = {\n\t\t\tget: function () {\n\t\t\t\treturn build.call(this, this._styles.concat(key));\n\t\t\t}\n\t\t};\n\t});\n\n\treturn ret;\n})();\n\nvar proto = defineProps(function chalk() {}, styles);\n\nfunction build(_styles) {\n\tvar builder = function builder() {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder.enabled = this.enabled;\n\t// __proto__ is used because we must return a function, but there is\n\t// no way to create a function with a different prototype.\n\t/*eslint no-proto: 0 */\n\tbuilder.__proto__ = proto;\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// support varags, but simply cast to string in case there's only one arg\n\tvar args = arguments;\n\tvar argsLen = args.length;\n\tvar str = argsLen !== 0 && String(arguments[0]);\n\n\tif (argsLen > 1) {\n\t\t// don't slice `arguments`, it prevents v8 optimizations\n\t\tfor (var a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || !str) {\n\t\treturn str;\n\t}\n\n\tvar nestedStyles = this._styles;\n\tvar i = nestedStyles.length;\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tvar originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\twhile (i--) {\n\t\tvar code = ansiStyles[nestedStyles[i]];\n\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\t}\n\n\t// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction init() {\n\tvar ret = {};\n\n\tObject.keys(styles).forEach(function (name) {\n\t\tret[name] = {\n\t\t\tget: function () {\n\t\t\t\treturn build.call(this, [name]);\n\t\t\t}\n\t\t};\n\t});\n\n\treturn ret;\n}\n\ndefineProps(Chalk.prototype, init());\n\nmodule.exports = new Chalk();\nmodule.exports.styles = ansiStyles;\nmodule.exports.hasColor = hasAnsi;\nmodule.exports.stripColor = stripAnsi;\nmodule.exports.supportsColor = supportsColor;\n","'use strict';\n\nfunction assembleStyles () {\n\tvar styles = {\n\t\tmodifiers: {\n\t\t\treset: [0, 0],\n\t\t\tbold: [1, 22], // 21 isn't widely supported and 22 does the same thing\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolors: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39]\n\t\t},\n\t\tbgColors: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49]\n\t\t}\n\t};\n\n\t// fix humans\n\tstyles.colors.grey = styles.colors.gray;\n\n\tObject.keys(styles).forEach(function (groupName) {\n\t\tvar group = styles[groupName];\n\n\t\tObject.keys(group).forEach(function (styleName) {\n\t\t\tvar style = group[styleName];\n\n\t\t\tstyles[styleName] = group[styleName] = {\n\t\t\t\topen: '\\u001b[' + style[0] + 'm',\n\t\t\t\tclose: '\\u001b[' + style[1] + 'm'\n\t\t\t};\n\t\t});\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\t});\n\n\treturn styles;\n}\n\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n","'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe,  '\\\\$&');\n};\n","'use strict';\nvar ansiRegex = require('ansi-regex');\nvar re = new RegExp(ansiRegex().source); // remove the `g` flag\nmodule.exports = re.test.bind(re);\n","'use strict';\nmodule.exports = function () {\n\treturn /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\n};\n","'use strict';\nvar ansiRegex = require('ansi-regex')();\n\nmodule.exports = function (str) {\n\treturn typeof str === 'string' ? str.replace(ansiRegex, '') : str;\n};\n","'use strict';\nvar argv = process.argv;\n\nvar terminator = argv.indexOf('--');\nvar hasFlag = function (flag) {\n\tflag = '--' + flag;\n\tvar pos = argv.indexOf(flag);\n\treturn pos !== -1 && (terminator !== -1 ? pos < terminator : true);\n};\n\nmodule.exports = (function () {\n\tif ('FORCE_COLOR' in process.env) {\n\t\treturn true;\n\t}\n\n\tif (hasFlag('no-color') ||\n\t\thasFlag('no-colors') ||\n\t\thasFlag('color=false')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('color') ||\n\t\thasFlag('colors') ||\n\t\thasFlag('color=true') ||\n\t\thasFlag('color=always')) {\n\t\treturn true;\n\t}\n\n\tif (process.stdout && !process.stdout.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn true;\n\t}\n\n\tif ('COLORTERM' in process.env) {\n\t\treturn true;\n\t}\n\n\tif (process.env.TERM === 'dumb') {\n\t\treturn false;\n\t}\n\n\tif (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n})();\n","(function () {\n  'use strict';\n\n  function setupConsoleTable() {\n    if (typeof console === 'undefined') {\n      throw new Error('Weird, console object is undefined');\n    }\n    if (typeof console.table === 'function') {\n      return;\n    }\n\n    var Table = require('easy-table');\n\n    function arrayToString(arr) {\n      var t = new Table();\n      arr.forEach(function (record) {\n        if (typeof record === 'string' ||\n          typeof record === 'number') {\n          t.cell('item', record);\n        } else {\n          // assume plain object\n          Object.keys(record).forEach(function (property) {\n            t.cell(property, record[property]);\n          });\n        }\n        t.newRow();\n      });\n      return t.toString();\n    }\n\n    function printTitleTable(title, arr) {\n      var str = arrayToString(arr);\n      var rowLength = str.indexOf('\\n');\n      if (rowLength > 0) {\n        if (title.length > rowLength) {\n          rowLength = title.length;\n        }\n        console.log(title);\n        var sep = '-', k, line = '';\n        for (k = 0; k < rowLength; k += 1) {\n          line += sep;\n        }\n        console.log(line);\n      }\n      console.log(str);\n    }\n\n    function objectToArray(obj) {\n      var keys = Object.keys(obj);\n      return keys.map(function (key) {\n        return {\n          key: key,\n          value: obj[key]\n        };\n      });\n    }\n\n    function objectToString(obj) {\n      return arrayToString(objectToArray(obj));\n    }\n\n    console.table = function () {\n      var args = Array.prototype.slice.call(arguments);\n\n      if (args.length === 2 &&\n        typeof args[0] === 'string' &&\n        Array.isArray(args[1])) {\n\n        return printTitleTable(args[0], args[1]);\n      }\n      args.forEach(function (k) {\n        if (typeof k === 'string') {\n          return console.log(k);\n        } else if (Array.isArray(k)) {\n          console.log(arrayToString(k));\n        } else if (typeof k === 'object') {\n          console.log(objectToString(k));\n        }\n      });\n    };\n  }\n\n  setupConsoleTable();\n}());\n","var padLeft = require('./table').padLeft\n\nvar Printer = exports.Printer = function (name, format) {\n    return function (val, width) {\n        var s = name + ' ' + format(val)\n        return width == null\n            ? s\n            : padLeft(s, width)\n    }\n}\n\n\nexports.sum = function (sum, val) {\n    sum = sum || 0\n    return sum += val\n}\n\nexports.sum.printer = Printer('\\u2211', String)\n\n\nexports.avg = function (sum, val, index, length) {\n    sum = sum || 0\n    sum += val\n    return index + 1 == length\n        ? sum / length\n        : sum\n}\n\nexports.avg.printer = Printer('Avg:', String)","module.exports = sort\n\nfunction sort (comparator) {\n    if (typeof comparator != 'function') {\n        var sortKeys = Array.isArray(comparator)\n            ? comparator\n            : Object.keys(this.columns)\n        comparator = KeysComparator(sortKeys)\n    }\n    this.rows.sort(comparator)\n    return this\n}\n\nfunction KeysComparator (keys) {\n    var comparators = keys.map(function (key) {\n        var sortFn = 'asc'\n\n        var m = /(.*)\\|\\s*(asc|des)\\s*$/.exec(key)\n        if (m) {\n            key = m[1]\n            sortFn = m[2]\n        }\n\n        return function (a, b) {\n            var ret = compare(a[key], b[key])\n            return sortFn == 'asc' ? ret : -1 * ret\n        }\n    })\n\n    return function (a, b) {\n        for (var i = 0; i < comparators.length; i++) {\n            var res = comparators[i](a, b)\n            if (res != 0) return res\n        }\n        return 0\n    }\n}\n\nfunction compare (a, b) {\n    if (a === b) return 0\n    if (a === undefined) return 1\n    if (b === undefined) return -1\n    if (a === null) return 1\n    if (b === null) return -1\n    if (a > b) return 1\n    if (a < b) return -1\n    return compare(String(a), String(b))\n}","module.exports = Table\n\nTable.string = function (val) {\n    if (val === undefined) return ''\n    return String(val)\n}\n\nTable.Number = function (digits) {\n    return function (val, width) {\n        if (val === undefined) return ''\n        if (typeof val != 'number')\n            throw new Error(String(val) + ' is not a number')\n        var s = digits == null ? String(val) : val.toFixed(digits).toString()\n        return Table.padLeft(s, width)\n    }\n}\n\nTable.RightPadder = function (char) {\n    char = char || ' '\n    return function (val, length) {\n        var s = String(val)\n        var l = s.length\n        for (var i = 0; i < length - l; i++) {\n            s += char\n        }\n        return s\n    }\n}\n\nTable.LeftPadder = function (char) {\n    char = char || ' '\n    return function (val, length) {\n        var ret = ''\n        var s = String(val)\n        for (var i = 0; i < length - s.length; i++) {\n            ret += char\n        }\n        ret += s\n        return ret\n    }\n}\n\nTable.padLeft = Table.LeftPadder()\n\nTable.printArray = function (arr, format, cb) {\n    format = typeof format == 'function' ? format : Formatter(format)\n    cb = cb || function (t) {\n        return t.toString()\n    }\n\n    var t = new Table\n    var cell = t.cell.bind(t)\n\n    arr.forEach(function (obj) {\n        format(obj, cell)\n        t.newRow()\n    })\n    return cb(t)\n}\n\nTable.printObj = function (obj, format, cb) {\n    format = typeof format == 'function' ? format : Formatter(format)\n    cb = cb || function (t) {\n        return t.printTransposed(' : ')\n    }\n\n    var t = new Table\n    format(obj, t.cell.bind(t))\n    t.newRow()\n    return cb(t)\n}\n\nfunction Formatter (opts) {\n    opts = opts || {}\n    return function (obj, cell) {\n        for (var key in obj) {\n            if (!obj.hasOwnProperty(key)) continue\n            var o = opts[key]\n            cell(\n                (o && o.name) || key,\n                obj[key],\n                o && o.printer,\n                o && o.width\n            )\n        }\n    }\n}\n\n\nTable.Row = Row\nfunction Row () {\n    Object.defineProperties(this, {\n        __printers: {\n            value: {},\n            enumerable: false\n        },\n        __cell: {\n            value: function (col, val, printer) {\n                this[col] = val\n                this.__printers[col] = printer\n            },\n            enumerable: false\n        }\n    })\n}\n\n\nTable.print = print\nfunction print (rows, columns, shift) {\n    var padSpaces = Table.RightPadder()\n    var widths = {}\n\n    function setWidth (col, width) {\n        var isFixed = columns[col].width != null\n        if (isFixed) {\n            widths[col] = columns[col].width\n        } else {\n            if (widths[col] > width) return\n            widths[col] = width\n        }\n    }\n\n    function cellPrinter (row, col) {\n        return (row.__printers && row.__printers[col]) || Table.string\n    }\n\n    function calcWidths () {\n        rows.forEach(function (row) {\n            for (var key in columns) {\n                setWidth(key, cellPrinter(row, key).call(row, row[key]).length)\n            }\n        })\n    }\n\n    function printRow (cb) {\n        var s = ''\n        var firstColumn = true\n        for (var key in columns) {\n            if (!firstColumn) s += shift\n            firstColumn = false\n            var width = widths[key]\n            s += printCell(cb(key, width), width)\n        }\n        s += '\\n'\n        return s\n    }\n\n    function printCell (s, width) {\n        if (s.length <= width) return padSpaces(s, width)\n        s = s.slice(0, width)\n        if (width > 3) s = s.slice(0, -3).concat('...')\n        return s\n    }\n\n    calcWidths()\n\n    return rows.map(function (row) {\n        return printRow(function (key, width) {\n            return cellPrinter(row, key).call(row, row[key], width)\n        })\n    }).join('')\n\n}\n\n\nfunction Table () {\n    this.columns = {} /* @api: public */\n    this.rows = [] /* @api: public */\n    this._row = new Row\n}\n\n\nTable.prototype.cell = function (col, val, printer, width) {\n    this._row.__cell(col, val, printer)\n    var c = this.columns[col] || (this.columns[col] = {})\n    if (width != null) c.width = width\n    return this\n}\n\nTable.prototype.newRow = Table.prototype.newLine = function () {\n    this.rows.push(this._row)\n    this._row = new Row\n    return this\n}\n\nTable.prototype.sort = require('./sort')\n\nTable.aggr = require('./aggregations')\n\nTable.prototype.totals = null /* @api: public */\n\nTable.prototype.total = function (col, fn, printer) {\n    fn = fn || Table.aggr.sum\n    printer = printer || fn.printer\n\n    this.totals = this.totals || new Row\n\n    var val\n    var rows = this.rows\n\n    this.totals.__cell(col, null, function (_, width) {\n        if (width != null) return printer(val, width)\n        val = rows.reduce(function (val, row, index) {\n            return fn(val, row[col], index, rows.length)\n        }, null)\n        return printer(val)\n    })\n    return this\n}\n\nTable.prototype.shift = '  '\n\nTable.prototype.print = function () {\n    return print(this.rows, this.columns, this.shift)\n}\n\nTable.prototype.printTransposed = function (delimeter) {\n    var t = new Table\n    if (delimeter) t.shift = delimeter\n\n    function Printer (row, key) {\n        var p = row.__printers && row.__printers[key]\n        if (p) return function (val) {\n            return p(val)\n        }\n    }\n\n    for (var key in this.columns) {\n        t.cell('h', key)\n        this.rows.forEach(function (row, index) {\n            t.cell('f' + index, row[key], Printer(row, key))\n        })\n        t.newRow()\n    }\n    return t.print()\n}\n\nTable.prototype.toString = function () {\n    var padWithDashs = Table.RightPadder('-')\n    var delimeter = this.createRow(function () {\n        return ['', padWithDashs]\n    })\n    var head = this.createRow(function (key) {\n        return [key]\n    })\n    var rows = [head, delimeter].concat(this.rows)\n    if (this.totals) {\n        rows = rows.concat([delimeter, this.totals])\n    }\n    return print(rows, this.columns, this.shift)\n}\n\nTable.prototype.createRow = function (cb) {\n    var row = new Row\n    for (var key in this.columns) {\n        var args = cb(key)\n        row.__cell(key, args[0], args[1])\n    }\n    return row\n}","module.exports = Table\n\nfunction Table() {\n  this.rows = []\n  this.row = {__printers : {}}\n}\n\n/**\n * Push the current row to the table and start a new one\n *\n * @returns {Table} `this`\n */\n\nTable.prototype.newRow = function() {\n  this.rows.push(this.row)\n  this.row = {__printers : {}}\n  return this\n}\n\n/**\n * Write cell in the current row\n *\n * @param {String} col          - Column name\n * @param {Any} val             - Cell value\n * @param {Function} [printer]  - Printer function to format the value\n * @returns {Table} `this`\n */\n\nTable.prototype.cell = function(col, val, printer) {\n  this.row[col] = val\n  this.row.__printers[col] = printer || string\n  return this\n}\n\n/**\n * String to separate columns\n */\n\nTable.prototype.separator = '  '\n\nfunction string(val) {\n  return val === undefined ? '' : ''+val\n}\n\nfunction length(str) {\n  return str.replace(/\\u001b\\[\\d+m/g, '').length\n}\n\n/**\n * Default printer\n */\n\nTable.string = string\n\n/**\n * Create a printer which right aligns the content by padding with `ch` on the left\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.leftPadder = leftPadder\n\nfunction leftPadder(ch) {\n  return function(val, width) {\n    var str = string(val)\n    var len = length(str)\n    var pad = width > len ? Array(width - len + 1).join(ch) : ''\n    return pad + str\n  }\n}\n\n/**\n * Printer which right aligns the content\n */\n\nvar padLeft = Table.padLeft = leftPadder(' ')\n\n/**\n * Create a printer which pads with `ch` on the right\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.rightPadder = rightPadder\n\nfunction rightPadder(ch) {\n  return function padRight(val, width) {\n    var str = string(val)\n    var len = length(str)\n    var pad = width > len ? Array(width - len + 1).join(ch) : ''\n    return str + pad\n  }\n}\n\nvar padRight = rightPadder(' ')\n\n/**\n * Create a printer for numbers\n *\n * Will do right alignment and optionally fix the number of digits after decimal point\n *\n * @param {Number} [digits] - Number of digits for fixpoint notation\n * @returns {Function}\n */\n\nTable.number = function(digits) {\n  return function(val, width) {\n    if (val == null) return ''\n    if (typeof val != 'number')\n      throw new Error(''+val + ' is not a number')\n    var str = digits == null ? val+'' : val.toFixed(digits)\n    return padLeft(str, width)\n  }\n}\n\nfunction each(row, fn) {\n  for(var key in row) {\n    if (key == '__printers') continue\n    fn(key, row[key])\n  }\n}\n\n/**\n * Get list of columns in printing order\n *\n * @returns {string[]}\n */\n\nTable.prototype.columns = function() {\n  var cols = {}\n  for(var i = 0; i < 2; i++) { // do 2 times\n    this.rows.forEach(function(row) {\n      var idx = 0\n      each(row, function(key) {\n        idx = Math.max(idx, cols[key] || 0)\n        cols[key] = idx\n        idx++\n      })\n    })\n  }\n  return Object.keys(cols).sort(function(a, b) {\n    return cols[a] - cols[b]\n  })\n}\n\n/**\n * Format just rows, i.e. print the table without headers and totals\n *\n * @returns {String} String representaion of the table\n */\n\nTable.prototype.print = function() {\n  var cols = this.columns()\n  var separator = this.separator\n  var widths = {}\n  var out = ''\n\n  // Calc widths\n  this.rows.forEach(function(row) {\n    each(row, function(key, val) {\n      var str = row.__printers[key].call(row, val)\n      widths[key] = Math.max(length(str), widths[key] || 0)\n    })\n  })\n\n  // Now print\n  this.rows.forEach(function(row) {\n    var line = ''\n    cols.forEach(function(key) {\n      var width = widths[key]\n      var str = row.hasOwnProperty(key)\n        ? ''+row.__printers[key].call(row, row[key], width)\n        : ''\n      line += padRight(str, width) + separator\n    })\n    line = line.slice(0, -separator.length)\n    out += line + '\\n'\n  })\n\n  return out\n}\n\n/**\n * Format the table\n *\n * @returns {String}\n */\n\nTable.prototype.toString = function() {\n  var cols = this.columns()\n  var out = new Table()\n\n  // copy options\n  out.separator = this.separator\n\n  // Write header\n  cols.forEach(function(col) {\n    out.cell(col, col)\n  })\n  out.newRow()\n  out.pushDelimeter(cols)\n\n  // Write body\n  out.rows = out.rows.concat(this.rows)\n\n  // Totals\n  if (this.totals && this.rows.length) {\n    out.pushDelimeter(cols)\n    this.forEachTotal(out.cell.bind(out))\n    out.newRow()\n  }\n\n  return out.print()\n}\n\n/**\n * Push delimeter row to the table (with each cell filled with dashs during printing)\n *\n * @param {String[]} [cols]\n * @returns {Table} `this`\n */\n\nTable.prototype.pushDelimeter = function(cols) {\n  cols = cols || this.columns()\n  cols.forEach(function(col) {\n    this.cell(col, undefined, leftPadder('-'))\n  }, this)\n  return this.newRow()\n}\n\n/**\n * Compute all totals and yield the results to `cb`\n *\n * @param {Function} cb - Callback function with signature `(column, value, printer)`\n */\n\nTable.prototype.forEachTotal = function(cb) {\n  for(var key in this.totals) {\n    var aggr = this.totals[key]\n    var acc = aggr.init\n    var len = this.rows.length\n    this.rows.forEach(function(row, idx) {\n      acc = aggr.reduce.call(row, acc, row[key], idx, len)\n    })\n    cb(key, acc, aggr.printer)\n  }\n}\n\n/**\n * Format the table so that each row represents column and each column represents row\n *\n * @param {Object} [opts]\n * @param {String} [ops.separator] - Column separation string\n * @param {Function} [opts.namePrinter] - Printer to format column names\n * @returns {String}\n */\n\nTable.prototype.printTransposed = function(opts) {\n  opts = opts || {}\n  var out = new Table\n  out.separator = opts.separator || this.separator\n  this.columns().forEach(function(col) {\n    out.cell(0, col, opts.namePrinter)\n    this.rows.forEach(function(row, idx) {\n      out.cell(idx+1, row[col], row.__printers[col])\n    })\n    out.newRow()\n  }, this)\n  return out.print()\n}\n\n/**\n * Sort the table\n *\n * @param {Function|string[]} [cmp] - Either compare function or a list of columns to sort on\n * @returns {Table} `this`\n */\n\nTable.prototype.sort = function(cmp) {\n  if (typeof cmp == 'function') {\n    this.rows.sort(cmp)\n    return this\n  }\n\n  var keys = Array.isArray(cmp) ? cmp : this.columns()\n\n  var comparators = keys.map(function(key) {\n    var order = 'asc'\n    var m = /(.*)\\|\\s*(asc|des)\\s*$/.exec(key)\n    if (m) {\n      key = m[1]\n      order = m[2]\n    }\n    return function (a, b) {\n      return order == 'asc'\n        ? compare(a[key], b[key])\n        : compare(b[key], a[key])\n    }\n  })\n\n  return this.sort(function(a, b) {\n    for (var i = 0; i < comparators.length; i++) {\n      var order = comparators[i](a, b)\n      if (order != 0) return order\n    }\n    return 0\n  })\n}\n\nfunction compare(a, b) {\n  if (a === b) return 0\n  if (a === undefined) return 1\n  if (b === undefined) return -1\n  if (a === null) return 1\n  if (b === null) return -1\n  if (a > b) return 1\n  if (a < b) return -1\n  return compare(String(a), String(b))\n}\n\n/**\n * Add a total for the column\n *\n * @param {String} col - column name\n * @param {Object} [opts]\n * @param {Function} [opts.reduce = sum] - reduce(acc, val, idx, length) function to compute the total value\n * @param {Function} [opts.printer = padLeft] - Printer to format the total cell\n * @param {Any} [opts.init = 0] - Initial value for reduction\n * @returns {Table} `this`\n */\n\nTable.prototype.total = function(col, opts) {\n  opts = opts || {}\n  this.totals = this.totals || {}\n  this.totals[col] = {\n    reduce: opts.reduce || Table.aggr.sum,\n    printer: opts.printer || padLeft,\n    init: opts.init == null ? 0 : opts.init\n  }\n  return this\n}\n\n/**\n * Predefined helpers for totals\n */\n\nTable.aggr = {}\n\n/**\n * Create a printer which formats the value with `printer`,\n * adds the `prefix` to it and right aligns the whole thing\n *\n * @param {String} prefix\n * @param {Function} printer\n * @returns {printer}\n */\n\nTable.aggr.printer = function(prefix, printer) {\n  printer = printer || string\n  return function(val, width) {\n    return padLeft(prefix + printer(val), width)\n  }\n}\n\n/**\n * Sum reduction\n */\n\nTable.aggr.sum = function(acc, val) {\n  return acc + val\n}\n\n/**\n * Average reduction\n */\n\nTable.aggr.avg = function(acc, val, idx, len) {\n  acc = acc + val\n  return idx + 1 == len ? acc/len : acc\n}\n\n/**\n * Print the array or object\n *\n * @param {Array|Object} obj - Object to print\n * @param {Function|Object} [format] - Format options\n * @param {Function} [cb] - Table post processing and formating\n * @returns {String}\n */\n\nTable.print = function(obj, format, cb) {\n  var opts = format || {}\n\n  format = typeof format == 'function'\n    ? format\n    : function(obj, cell) {\n      for(var key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        var params = opts[key] || {}\n        cell(params.name || key, obj[key], params.printer)\n      }\n    }\n\n  var t = new Table\n  var cell = t.cell.bind(t)\n\n  if (Array.isArray(obj)) {\n    cb = cb || function(t) { return t.toString() }\n    obj.forEach(function(item) {\n      format(item, cell)\n      t.newRow()\n    })\n  } else {\n    cb = cb || function(t) { return t.printTransposed({separator: ' : '}) }\n    format(obj, cell)\n    t.newRow()\n  }\n\n  return cb(t)\n}\n\n/**\n * Same as `Table.print()` but yields the result to `console.log()`\n */\n\nTable.log = function(obj, format, cb) {\n  console.log(Table.print(obj, format, cb))\n}\n\n/**\n * Same as `.toString()` but yields the result to `console.log()`\n */\n\nTable.prototype.log = function() {\n  console.log(this.toString())\n}\n","var utils = require('./utils');\n\nmodule.exports = profile;\n\nfunction profile(fn, config) {\n\n    if (!(fn instanceof Function)) {\n        throw new Error('No function to profile!');\n    }\n\n    config = utils.configure(config, {\n        limitIterations: 1e3,\n        limitTime: 100\n    });\n\n    var started = Date.now();\n    var lastResult,\n        elapsed,\n        operations = 0;\n\n    while (true) {\n\n        lastResult = fn();\n        elapsed = Date.now() - started;\n        operations++;\n\n        if (elapsed >= config.limitTime\n        ||  operations >= config.limitIterations) {\n            break;\n        }\n    }\n\n    return {\n        ops: operations / elapsed * 1000,\n        time: elapsed / operations,\n        lastResult: lastResult\n    };\n}","require('console.table');\nvar easyTable = require('easy-table');\n//var Table = require('easy-table');\n\nvar suite = require('./suite');\nvar formatNumber = require('./utils').formatNumber;\nvar utils = require('./utils');\nvar chalk = require('chalk');\n\nmodule.exports = report;\n\nfunction report(result, options) {\n\n    result = result.map(function (x) {\n        return {\n            name: x.name,\n            ops: utils.formatNumber(x.ops),\n            time: utils.formatNumber(x.time)\n        };\n    });\n    console.log(result);\n    console.table(result);\n    return;\n\n    var getMaxLength = function (key) {\n        var headerLength = headers[key].length;\n\n        var column = result.map(utils.prop(key));\n        var columnLength = column.map(utils.prop('length'));\n        var maxColumnLength = utils.max(columnLength);\n\n        return Math.max(headerLength, maxColumnLength);\n    };\n\n    var getChartLength = function (x, maxOps) {\n        var chartWidth = config.chartWidth - 1;\n        var k = x.original.ops / maxOps;\n        if (isNaN(k)) {\n            return chartWidth;\n        }\n        return Math.round(chartWidth * k);\n    };\n\n    // init\n\n    var config = {\n        chartWidth: 20\n    };\n\n    if (typeof options == 'object' ) {\n        Object.keys(options).forEach(function (key) {\n            config[key] = options[key];\n        });\n    }\n\n    // column headers\n    var headers = {\n        name: 'Name',\n        ops: 'Iterations per second',\n        time: 'Average time, ms',\n        chart: 'x'\n    };\n\n    // max operations per second value\n    var maxOps = utils.max(result.map(utils.prop('ops')));\n\n    // formatting\n    result = result.map(function (x) {\n        return {\n            name: x.name,\n            ops: utils.formatNumber(x.ops),\n            time: utils.formatNumber(x.time),\n            lastResult: x.lastResult,\n            original: x\n        };\n    });\n\n    // columns' widths\n    var nameMaxLength = getMaxLength('name');\n    var opsMaxLength = getMaxLength('ops');\n    var timeMaxLength = getMaxLength('time');\n\n    // final processing and output\n    var rowSeparator = '\\n';\n    var cellSeparator = ' | ';\n\n    var rows = result\n        .map(function (x) {\n            return [\n                utils.pad(x.name, nameMaxLength),\n                utils.pad(x.ops, opsMaxLength),\n                utils.pad(x.time, timeMaxLength),\n                utils.pad(utils.repeat('=', getChartLength(x, maxOps)) + '>', config.chartWidth)\n            ].join(cellSeparator);\n        });\n\n    headers = [\n        utils.pad(headers.name, nameMaxLength),\n        utils.pad(headers.ops, opsMaxLength),\n        utils.padLeft(headers.time, timeMaxLength),\n        utils.pad(headers.chart, config.chartWidth)\n    ];\n\n    var prefix = '| ';\n    var suffix = ' |';\n\n    var output = [];\n    var totalWidth = rows[0].length + prefix.length + suffix.length;\n    var horizontalLine = '+' + utils.repeat('-', totalWidth - 2) + '+';\n\n    output.push(horizontalLine);\n    output.push(prefix + headers.join(cellSeparator) + suffix);\n    output.push(horizontalLine);\n    output.push(rows.map(function (x, i) {\n        var color = i == 0 && 'green'\n                ||  i == 1 && 'yellow'\n                ||            'reset';\n        x = chalk[color](x);\n        return prefix + x + suffix;\n    }).join(rowSeparator));\n    output.push(horizontalLine);\n\n    return output.join('\\n');\n}","var utils = require('./utils');\nvar profile = require('./profile');\nvar report = require('./report');\n\nmodule.exports = suite;\n\nfunction extractFunctionName(fn) {\n    var exclude = ['function', 'return'];\n    var words = fn\n        .toString()\n        .replace(/!.*$/, '')\n        .match(/([\\w]+)/g)\n        .filter(function (x) {\n            return exclude.indexOf(x.trim()) == -1;\n        });\n    return utils.crop(words.join(' ').trim(), 20);\n}\n\nfunction suite(specs, config) {\n    specs = specs || [];\n    config = utils.configure(config, {\n        limitTime: 1, // profile\n        limitIterations: 1,  // profile\n        repeatTimes: 1,\n        printReport: false,\n        cacheWarmUpIterations: 0,\n        chartWidth: 20 // report\n    });\n\n    var repeatFn = function (fn, times) {\n        return function () {\n            for (var i = 0; i < times; i++) {\n                fn();\n            }\n        };\n    };\n\n    var suiteResult = specs.map(function (fn) {\n        var name = fn.name || extractFunctionName(fn) || utils.uniqId('test-');\n        if (config.repeatTimes != 1) {\n            fn = repeatFn(fn, config.repeatTimes);\n        }\n        var result = profile(fn, config);\n        return {\n            name: name,\n            ops: result.ops,\n            time: result.time,\n            lastResult: result.lastResult\n        };\n    });\n\n    suiteResult.sort(function (a, b) {\n        return b.ops - a.ops;\n    });\n\n    if (config.printReport) {\n        console.log(report(suiteResult, config));\n    }\n\n    return suiteResult;\n}","module.exports = {\n    // number\n    formatNumber: formatNumber,\n    // string\n    pad: pad,\n    padLeft: padLeft,\n    crop: crop,\n    // functional\n    prop: prop,\n    max: max,\n    repeat: repeat,\n    uniqId: uniqId,\n    // object\n    configure: configure\n};\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction formatNumber(n) {\n    if (typeof n == 'number') {\n        switch (true) {\n            case n === 0:\n                return '0';\n            case n < 1:\n                return n.toFixed(2);\n            case n < 1000:\n                return n.toFixed(0);\n            default:\n                return n.toExponential(1).replace(/e\\+/, ' x 10^');\n        }\n    } else {\n        return n;\n    }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction pad(str, n, char) {\n    if (char === undefined || char === '') {\n        char = ' ';\n    }\n    if (str.length < n) {\n        return pad(str + char, n, char);\n    }\n    return str;\n}\n\nfunction padLeft(str, n, char) {\n    if (char === undefined || char === '') {\n        char = ' ';\n    }\n    if (str.length < n) {\n        return padLeft(char + str, n, char);\n    }\n    return str;\n}\n\nfunction crop(str, length, subst) {\n    if (str.length <= length) {\n        return str;\n    }\n    subst = subst || '...';\n    return str.slice(0, length - subst.length + 1) + subst;\n}\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction prop(key) {\n    return function (x) {\n        return x[key];\n    };\n}\n\nfunction max(list) {\n    return Math.max.apply(Math, list);\n}\n\nfunction repeat(str, times) {\n    return new Array(times + 1).join(str);\n}\n\nfunction uniqId(prefix) {\n    return prefix + String(uniqId.counter++);\n}\nuniqId.counter = 0;\nuniqId.reset = function (counter) { uniqId.counter = counter };\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction configure(config, defaults) {\n    config = config || {};\n    defaults = defaults || {};\n\n    Object.keys(config).forEach(function (key) {\n        defaults[key] = config[key];\n    });\n\n    return defaults;\n}\n"],"sourceRoot":"/source/"}